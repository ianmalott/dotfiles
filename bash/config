#!/bin/bash

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

# Terminal Prompt
if [ "$color_prompt" = yes ]; then
  PS1="\n${debian_chroot:+($debian_chroot)}\[\033[01;37m\]\u\[\033[01;31m\]@\h\[\033[00m\] \[\033[01;33m\]\w\[\e[30;1m\] \$(parse_git_branch) \[\033[00m\]\n❯ "
else
  PS1="\n${debian_chroot:+($debian_chroot)}\u@\h \w \$(parse_git_branch) \n❯ "
fi
unset color_prompt

# Window Title
case "$TERM" in
  xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w  \$(parse_git_branch)\a\]$PS1";;
  *)
    ;;
esac

# enable programmable completion features
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi


#-------------------------------------------------------------------------------
# The following are useful for remote accounts
#-------------------------------------------------------------------------------

#SSHAGENT=/usr/bin/ssh-agent
#SSHAGENTARGS="-s"
#if [ -z "$SSH_AUTH_SOCK" -a -x "$SSHAGENT" ]; then
#  eval `$SSHAGENT $SSHAGENTARGS`
#  trap "kill $SSH_AGENT_PID" 0
#fi

## Prompt to cache private key password for session
#echo -en "\033[34m"
#read -p "Add private key to ssh-agent? (y/n): "
#echo -en "\033[0m"
#[ "$REPLY" == "y" ] && ssh-add ~/.ssh/id_rsa

## Symlink ssh auth sock for screen
#if [ -n $SSH_AUTH_SOCK ]; then
#  ln -sf "$SSH_AUTH_SOCK" "$HOME/tmp/ssh-agent-$USER-screen"
#fi
